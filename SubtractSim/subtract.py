from PyZOGY.subtract import run_subtraction
from SubtractSim.generateimage import degs2coords, sexa2deg
from astropy.io import fits
import numpy as np
from pyraf import iraf
import os


def do_photometry(filename, science_image, aperture_rad = 20., use_iraf=True):
    """Do aperture photometry on the difference image"""

    image_data = fits.getdata(filename)
    image_header = fits.getheader(science_image)
    sexa_ra, sexa_dec = image_header['RA'], image_header['DEC']
    ra, dec = sexa2deg(sexa_ra, sexa_dec)
    x, y = degs2coords(ra, dec, image_header)

    if use_iraf:
        coords = open('coords.txt', 'w')
        coords.write('{0} {1}'.format(x, y))
        coords.close()
        iraf.datapars.sigma = 20.
        iraf.datapars.fwhmpsf = 7.
        iraf.photpars.apertures = 15.
        outname = filename.replace('.fits', '.mag')
        iraf.phot(filename, coords='coords.txt', output=outname, verify='no', interactive='no')
        os.system('rm coords.txt')
        mag = open(outname, 'r')
        flux = float(mag.readlines()[-1].split()[3])

    else:
        x, y = [round(float(coord)) for coord in (x, y)]
        xind, yind = np.indices(image_data.shape)
        phot_pix = np.hypot(x - xind, y - yind) <= aperture_rad
        flux = np.sum(image_data[phot_pix])
    return flux


def subtract_images(image_list, subtraction_type):
    """Subtract images given in list generated by fakeimage"""

    outstring = ''
    for subtraction in subtraction_type:
        images = open(image_list)
        for image in images:
            files = image[:-1].split()
            science_image = files[0]
            science_psf = files[1]
            reference_image = files[2]
            reference_psf = files[3]

            output = science_image.split('/')[-1].replace('.fits', '.diff.fits')

            if subtraction == 'PyZOGY':

                run_subtraction(science_image,
                                reference_image,
                                science_psf,
                                reference_psf,
                                output=output,
                                n_stamps=10,
                                science_saturation=50000,
                                reference_saturation=50000,
                                normalization='science',
                                photometry=True,
                                matched_filter=False)

            elif subtraction == 'hotpants':
                command = 'hotpants -inim {0} -tmplim {1} -outim {2}'.format(
                    science_image, reference_image, output)
                print(command)
                os.system(command)

            flux = do_photometry(output, science_image)
            outstring += '{0} {1} {2}\n'.format(output, subtraction, flux)
    outfile = open('results.txt', 'w')
    outfile.write(outstring)
    outfile.close()
